% visualise:  unmix subroutine to visualise compositional data
%
%   [fh] = visualise(figno,DATA,LEGEND,TITLE,DGN,VNAMES)
%
%   Depending on the size of arrays passed by DATA the routine recognises
%   data as full compositional data (length = #samples), reduced
%   compositional data (length < #samples, > #variables), or end-member
%   compositions (length <= #variables). Data and end-members in a 2-RPC
%   space cannot be visualised with this routine.
%
%   figno  : input figure number to plot data in
%   DATA   : input cell array containing data (X), abundances (A), and/or end-members (F)
%   LEGEND : input cell array containing legend strings in same sequence as data arrays in DATA
%   TITLE  : input string for global figure title
%   DGN    : input rs-pva diagnostics structure as generated by main routine
%   VNAMES : input cell array with variable names as loaded from data table
%
%   fh     : output figure handle for later use or printing of figure
%
% created  : 2020-05-05  Tobias Keller, University of Glasgow
% license  : GNU General Public License v3.0


function    [fh] = visualise(figno,DATA,LEGEND,TITLE,DGN,VNAME,varargin)

if isempty(varargin); vstype = 'sct'; else; vstype = varargin{1}; end
FS = {'FontSize',14}; MT = {'.','o','*'}; MS = {'MarkerSize',10};
LW = {'LineWidth',1.5}; CL = {'Color','k','b','r','g','m','c','y'};

fh = figure(figno); clf;
if strcmp(vstype,'img'); load('ocean.mat','ocean'); end

if strcmp(vstype,'rgb')  % 2D RGB image
    dft = [1,2,3];
    rgb = input('\nHow would you like to assign bands to RGB channels? (default [1,2,3]):\n');
    if isempty(rgb); rgb = dft; end
    nn = size(rgb,1);
    jj = ceil(sqrt(nn));
    ii = ceil((nn)/jj);
    pp = 1;
    if size(DATA{1},1) < DGN.mx*DGN.my
        DATA{1}(DGN.Ii,pp) = DATA{1}(:,pp);
        DATA{1}(DGN.Ir,pp) = nan;
    end
    for i = 1:ii
        for j = 1:jj
            subplot(ii,jj,pp); box on;
            RGB = DATA{1}(:,rgb(pp,:));
            RGB = (RGB - (mean(RGB)-2.5*std(RGB))) ./ ((mean(RGB)+2.5*std(RGB)) - (mean(RGB)-2.5*std(RGB)));
            imagesc(reshape(RGB,DGN.mx,DGN.my,[])); axis equal tight; hold on;
            title(['RGB: ',int2str(rgb(pp,:))]);
            pp = pp+1;
            if (pp>nn); break; end
        end
    end
    
else
    if strcmp(vstype,'img')  % 2D image
        kk = length(DATA);
        nn = size(DATA{1},2);
        jj = ceil(sqrt(nn));
        ii = ceil((nn)/jj);
        pp = 1;
        for i = 1:ii
            for j = 1:jj
                subplot(ii,jj,pp); box on;
                if size(DATA{1},1) < DGN.mx*DGN.my
                    DATA{1}(DGN.Ii,pp) = DATA{1}(:,pp);
                    DATA{1}(DGN.Ir,pp) = nan;
                end
                imagesc(reshape(DATA{1}(:,pp),DGN.mx,DGN.my,[])); axis equal tight; colormap(ocean); colorbar; hold on;
                title(VNAME{pp},FS{:});
                pp = pp+1;
                if (pp>nn); break; end
            end
        end
    else  % scatter plot
        kk = length(DATA);
        nn = size(DATA{1},2);
        jj = ceil(sqrt(nn-1));
        ii = ceil((nn-1)/jj);
        pp = 2;
        for i = 1:ii
            for j = 1:jj
                subplot(ii,jj,pp-1); box on;
                for k = 1:kk
                    if  size(DATA{k},1) == DGN.m % is data array
                        plot(DATA{k}(DGN.Ii,1),DATA{k}(DGN.Ii,pp),MT{1},MS{:},CL{1},CL{1+k},LW{:}); hold on;
                        plot(DATA{k}(DGN.Ir,1),DATA{k}(DGN.Ir,pp),MT{2},MS{:},CL{1},CL{1+k},LW{:});
                        if ~isempty(DGN.Ir) && all(~isnan(DATA{k}(:))); LEGEND = {LEGEND{1:2*k-1},[LEGEND{2*k-1},' rmvd'],LEGEND{2*k:end}}; end
                    elseif size(DATA{k},1) > DGN.p % is reduced data array
                        plot(DATA{k}(:,1),DATA{k}(:,pp),MT{1},MS{:},CL{1},CL{1+k},LW{:}); hold on;
                    else % is EM array
                        plot(DATA{k}(:,1),DATA{k}(:,pp),MT{3},MS{:},CL{1},CL{1+k},LW{:});
                    end
                end
                if pp==1; legend(LEGEND{:},FS{:},LW{:},'Location','northoutside','box','on'); end
                xlabel(VNAME{1},FS{:}); ylabel(VNAME{pp},FS{:});
                set(gca,LW{:});
                pp = pp+1;
                if (pp>nn); break; end
            end
        end
    end
end
sgtitle(TITLE,FS{1},FS{2}+2);
drawnow

end  % end function
